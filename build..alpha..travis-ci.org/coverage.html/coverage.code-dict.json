{"/home/travis/build/npmtest/node-npmtest-grunt-html2js/test.js":"/* istanbul instrument in package npmtest_grunt_html2js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html2js/lib.npmtest_grunt_html2js.js":"/* istanbul instrument in package npmtest_grunt_html2js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_html2js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_html2js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html2js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-html2js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_html2js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_html2js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_html2js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_html2js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_html2js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_html2js.__dirname + '/lib.npmtest_grunt_html2js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html2js/node_modules/grunt-html2js/Gruntfile.js":"/*\n * grunt-html2js\n * https://github.com/rquadling/grunt-html2js\n *\n * Copyright (c) 2013 Karl Goldstein\n * Copyright (c) 2017 Richard Quadling\n *\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n      },\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= nodeunit.tests %>',\n      ]\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp'],\n    },\n\n    // Configuration to be run (and then tested).\n    // See https://github.com/gruntjs/grunt/wiki/Configuring-tasks\n    // for configuration options that need to be tested\n    html2js: {\n\n      regex_in_template: {\n        src: ['test/fixtures/pattern.tpl.html'],\n        dest: 'tmp/regex_in_template.js'\n      },\n\n      compact_format_default_options: {\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/compact_format_default_options.js'\n      },\n\n      broken_newlines: {\n        src: ['test/fixtures/broken_newlines.tpl.html'],\n        dest: 'tmp/broken_newlines.js'\n      },\n\n      empty_attribute: {\n        src: ['test/fixtures/empty_attribute.tpl.html'],\n        dest: 'tmp/empty_attribute.js'\n      },\n\n      custom_attribute_collapsed: {\n        src: ['test/fixtures/custom_attribute_collapse.tpl.html'],\n        dest: 'tmp/custom_attribute_collapsed.js',\n        options: {\n          htmlmin: {\n            customAttrCollapse: /my-[a-z]*/\n          }\n        }\n      },\n\n      custom_attribute_not_collapsed: {\n        src: ['test/fixtures/custom_attribute_collapse.tpl.html'],\n        dest: 'tmp/custom_attribute_not_collapsed.js'\n      },\n\n      files_object_default_options: {\n        files: {\n          'tmp/files_object_default_options_1.js': ['test/fixtures/one.tpl.html'],\n          'tmp/files_object_default_options_2.js': ['test/fixtures/two.tpl.html']\n        }\n      },\n\n      files_array_default_options: {\n        files: [\n          {\n            dest: 'tmp/files_array_default_options_1.js',\n            src: ['test/fixtures/one.tpl.html']\n          },\n          {\n            dest: 'tmp/files_array_default_options_2.js',\n            src: ['test/fixtures/two.tpl.html']\n          }\n        ]\n      },\n\n      compact_format_custom_options: {\n        options: {\n          base: 'test',\n          module: 'my-custom-template-module'\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/compact_format_custom_options.js'\n      },\n\n      files_object_custom_options: {\n        options: {\n          base: 'test',\n          module: 'my-custom-template-module'\n        },\n        files: {\n          'tmp/files_object_custom_options_1.js': ['test/fixtures/one.tpl.html'],\n          'tmp/files_object_custom_options_2.js': ['test/fixtures/two.tpl.html']\n        }\n      },\n\n      files_array_custom_options: {\n        options: {\n          base: 'test',\n          module: 'my-custom-template-module'\n        },\n        files: [\n          {\n            dest: 'tmp/files_array_custom_options_1.js',\n            src: ['test/fixtures/one.tpl.html'],\n            module: 'my-custom-templates'\n          },\n          {\n            dest: 'tmp/files_array_custom_options_2.js',\n            src: ['test/fixtures/two.tpl.html'],\n            module: 'my-custom-templates'\n          }\n        ]\n      },\n\n      multi_lines: {\n        src: ['test/fixtures/three.tpl.html'],\n        dest: 'tmp/multi_lines.js'\n      },\n\n      double_quotes: {\n        src: ['test/fixtures/four.tpl.html'],\n        dest: 'tmp/double_quotes.js'\n      },\n\n      single_quotes: {\n        options: {\n          quoteChar: '\\''\n        },\n        src: ['test/fixtures/four.tpl.html'],\n        dest: 'tmp/single_quotes.js'\n      },\n\n      multi_lines_tabs: {\n        options: {\n          indentString: '\\t'\n        },\n        src: ['test/fixtures/three.tpl.html'],\n        dest: 'tmp/multi_lines_tabs.js'\n      },\n\n      multi_lines_4space: {\n        options: {\n          indentString: '    '\n        },\n        src: ['test/fixtures/three.tpl.html'],\n        dest: 'tmp/multi_lines_4spaces.js'\n      },\n\n      file_header: {\n        options: {\n          fileHeaderString: '/* global angular: false */\\n'\n        },\n        src: ['test/fixtures/three.tpl.html'],\n        dest: 'tmp/file_header.js'\n      },\n\n      rename: {\n        options: {\n          rename: function (moduleName) {\n            return moduleName.replace('.html', '');\n          }\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/rename.js'\n      },\n\n      module_as_function: {\n        options: {\n          module: function (file) {\n            return \"NAME_FROM_FUNCTION\";\n          }\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/module_as_function.js'\n      },\n\n      coffee: {\n        options: {\n          target: 'coffee'\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/coffee.coffee'\n      },\n\n      strict_mode: {\n        options: {\n          useStrict: true\n        },\n        src: ['test/fixtures/one.tpl.html'],\n        dest: 'tmp/strict_mode.js'\n      },\n\n      htmlmin: {\n        options: {\n          htmlmin: {\n            collapseBooleanAttributes: true,\n            collapseWhitespace: true,\n            removeAttributeQuotes: true,\n            removeComments: true,\n            removeEmptyAttributes: true,\n            removeRedundantAttributes: true,\n            removeScriptTypeAttributes: true,\n            removeStyleLinkTypeAttributes: true\n          }\n        },\n        src: ['test/fixtures/five.tpl.html'],\n        dest: 'tmp/htmlmin.js'\n      },\n\n      process_template: {\n        testMessages: {\n          title: 'Main Title',\n          subtitle: 'Subtitle with {{ interpolation }}'\n        },\n        options: {\n          process: true\n        },\n        src: ['test/fixtures/process_template.tpl.html'],\n        dest: 'tmp/process_template.js'\n      },\n\n      process_function: {\n        options: {\n          process: function (html, filePath) {\n            html = html.replace('(ONE)', '1');\n            html = html.replace('(TWO)', '2');\n            html = html.replace('(THREE)', '3');\n            return html;\n          }\n        },\n        src: ['test/fixtures/process_function.tpl.html'],\n        dest: 'tmp/process_function.js'\n      },\n\n      process_jade: {\n        src: ['test/fixtures/process_jade.jade'],\n        dest: 'tmp/process_jade.js'\n      },\n\n      process_jade_custom: {\n        options: {\n          jade: {doctype: 'html'}\n        },\n        src: ['test/fixtures/process_jade_custom.jade'],\n        dest: 'tmp/process_jade_custom.js'\n      },\n\n      process_jade_with_include: {\n        options: {\n          jade: {}\n        },\n        src: ['test/fixtures/process_jade_with_include.jade'],\n        dest: 'tmp/process_jade_with_include.js'\n      },\n\n      process_all_jade: {\n        options: {\n          jade: {},\n          watch: true\n        },\n        src: ['test/fixtures/*.jade'],\n        dest: 'tmp/process_all_jade.js'\n      },\n\n      single_module: {\n        options: {\n          singleModule: true\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/three.tpl.html'],\n        dest: 'tmp/single_module.js'\n      },\n\n      single_module_coffee: {\n        options: {\n          singleModule: true,\n          target: 'coffee'\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/three.tpl.html'],\n        dest: 'tmp/single_module.coffee'\n      },\n\n      existing_module: {\n        options: {\n          singleModule: true,\n          existingModule: true\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/three.tpl.html'],\n        dest: 'tmp/existing_module.js'\n      },\n      amd_module: {\n        options: {\n          amd: true\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/amd_module.js'\n      },\n      amd_module_custom_prefix: {\n        options: {\n          amd: true,\n          amdPrefixString: \"define(['ng'], function(angular){\"\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/amd_module_custom_prefix.js'\n      },\n      amd_module_custom_suffix: {\n        options: {\n          amd: true,\n          amdSuffixString: \"}); //Custom!\"\n        },\n        src: ['test/fixtures/one.tpl.html', 'test/fixtures/two.tpl.html'],\n        dest: 'tmp/amd_module_custom_suffix.js'\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js']\n    },\n\n    changelog: {\n      options: {\n        dest: 'CHANGELOG.md'\n      }\n    }\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  require('load-grunt-tasks')(grunt);\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', ['clean', 'html2js', 'nodeunit']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-html2js/node_modules/grunt-html2js/tasks/html2js.js":"/*\n * grunt-html2js\n * https://github.com/rquadling/grunt-html2js\n *\n * Copyright (c) 2013 Karl Goldstein\n * Copyright (c) 2017 Richard Quadling\n *\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\n  var path = require('path');\n  var minify = require('html-minifier').minify;\n\n  var escapeContent = function (content, quoteChar, indentString) {\n    var bsRegexp = new RegExp('\\\\\\\\', 'g');\n    var quoteRegexp = new RegExp('\\\\' + quoteChar, 'g');\n    var nlReplace = '\\\\n' + quoteChar + ' +\\n' + indentString + indentString + quoteChar;\n    return content.replace(bsRegexp, '\\\\\\\\').replace(quoteRegexp, '\\\\' + quoteChar).replace(/\\r*\\n/g, nlReplace);\n  };\n\n  // convert Windows file separator URL path separator\n  var normalizePath = function (p) {\n    if (path.sep !== '/') {\n      p = p.replace(/\\\\/g, '/');\n    }\n    return p;\n  };\n\n  // Warn on and remove invalid source files (if nonull was set).\n  var existsFilter = function (filepath) {\n    if (!grunt.file.exists(filepath)) {\n      grunt.log.warn('Source file \"' + filepath + '\" not found.');\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  function isJadeTemplate(filepath) {\n    var jadeExtension = /\\.jade$/;\n    return jadeExtension.test(filepath);\n  }\n\n  // return template content\n  var getContent = function (filepath, options) {\n    var content = grunt.file.read(filepath);\n    if (isJadeTemplate(filepath)) {\n      var jade = require('jade');\n      options.jade.filename = filepath;\n      content = jade.render(content, options.jade);\n    }\n\n    // Process files as templates if requested.\n    var process = options.process;\n    if (typeof process === \"function\") {\n      content = process(content, filepath);\n    } else if (process) {\n      if (process === true) {\n        process = {};\n      }\n      content = grunt.template.process(content, process);\n    }\n\n    if (Object.keys(options.htmlmin).length) {\n      try {\n        content = minify(content, options.htmlmin);\n      } catch (err) {\n        grunt.warn(filepath + '\\n' + err);\n      }\n    }\n\n    // trim leading whitespace\n    content = content.replace(/(^\\s*)/g, '');\n\n    return escapeContent(content, options.quoteChar, options.indentString);\n  };\n\n  // compile a template to an angular module\n  var compileTemplate = function (moduleName, filepath, options) {\n    var quoteChar = options.quoteChar;\n    var indentString = options.indentString;\n    var withModule = !options.singleModule;\n    var content = getContent(filepath, options);\n    var doubleIndent = indentString + indentString;\n    var strict = (options.useStrict) ? indentString + quoteChar + 'use strict' + quoteChar + ';\\n' : '';\n    var compiled = '';\n\n    if (withModule) {\n      compiled += 'angular.module(' + quoteChar + moduleName + quoteChar + ', []).run([' + quoteChar + '$templateCache' + quoteChar + ', function ($templateCache) {\\n' + strict;\n    }\n\n    compiled += indentString + '$templateCache.put(' + quoteChar + moduleName + quoteChar + ',\\n' +\n      doubleIndent + quoteChar + content + quoteChar + ');';\n\n    if (withModule) {\n      compiled += '\\n}]);\\n';\n    }\n\n    return compiled;\n  };\n\n  // compile a template to an angular module\n  var compileCoffeeTemplate = function (moduleName, filepath, options) {\n    var quoteChar = options.quoteChar;\n    var indentString = options.indentString;\n    var withModule = !options.singleModule;\n    var content = getContent(filepath, options);\n    var doubleIndent = indentString + indentString;\n    var compiled = '';\n\n    if (withModule) {\n      compiled += '  angular.module(' + quoteChar + moduleName +\n        quoteChar + ', []).run([' + quoteChar + '$templateCache' + quoteChar + ', ($templateCache) ->\\n';\n    }\n\n    compiled += indentString + '$templateCache.put(' + quoteChar + moduleName + quoteChar +\n      ',\\n' + doubleIndent + quoteChar + content + quoteChar + ')';\n\n    if (withModule) {\n      compiled += '\\n])\\n';\n    }\n\n    return compiled;\n  };\n\n  grunt.registerMultiTask('html2js', 'Compiles Angular-JS templates to JavaScript.', function () {\n\n    var options = this.options({\n      base: 'src',\n      module: 'templates-' + this.target,\n      quoteChar: '\"',\n      fileHeaderString: '',\n      fileFooterString: '',\n      indentString: '  ',\n      target: 'js',\n      htmlmin: {},\n      process: false,\n      jade: {\n        pretty: true\n      },\n      singleModule: false,\n      existingModule: false,\n      watch: false,\n      amd: false,\n      amdPrefixString: \"define(['angular'], function (angular) {\\n  \",\n      amdSuffixString: \"});\\n\"\n    });\n\n    var counter = 0;\n    var target = this.target;\n\n    if (options.watch) {\n      var files = this.files;\n      var fileCache = {};\n      var chokidar = require('chokidar');\n      var watcher = chokidar.watch().on('change', function (filepath) {\n        // invalidate cache\n        fileCache[filepath] = null;\n        // regenerateModules\n        files.forEach(generateModule);\n      });\n    }\n\n    // generate a separate module\n    function generateModule(f) {\n\n      // f.dest must be a string or write will fail\n      var moduleNames = [];\n      var filePaths = f.src.filter(existsFilter);\n\n      if (options.watch) {\n        watcher.add(filePaths);\n      }\n\n      var modules = filePaths.map(function (filepath) {\n\n        var moduleName = normalizePath(path.relative(options.base, filepath));\n        if (grunt.util.kindOf(options.rename) === 'function') {\n          moduleName = options.rename(moduleName);\n        }\n        moduleNames.push(\"'\" + moduleName + \"'\");\n\n        var compiled;\n\n        if (options.watch && (compiled = fileCache[filepath])) {\n          // return compiled file contents from cache\n          return compiled;\n        }\n\n        if (options.target === 'js') {\n          compiled = compileTemplate(moduleName, filepath, options);\n        } else if (options.target === 'coffee') {\n          compiled = compileCoffeeTemplate(moduleName, filepath, options);\n        } else {\n          grunt.fail.fatal('Unknown target \"' + options.target + '\" specified');\n        }\n\n        if (options.watch) {\n          // store compiled file contents in cache\n          fileCache[filepath] = compiled;\n        }\n\n        return compiled;\n      });\n\n      counter += modules.length;\n      modules = modules.join('\\n');\n\n      var fileHeader = options.fileHeaderString !== '' ? options.fileHeaderString + '\\n' : '';\n      var fileFooter = options.fileFooterString !== '' ? options.fileFooterString + '\\n' : '';\n      var bundle = \"\";\n      var targetModule = f.module || options.module;\n      var indentString = options.indentString;\n      var quoteChar = options.quoteChar;\n      var strict = (options.useStrict) ? indentString + quoteChar + 'use strict' + quoteChar + ';\\n' : '';\n      var amdPrefix = \"\";\n      var amdSuffix = \"\";\n      // If options.module is a function, use that to get the targetModule\n      if (grunt.util.kindOf(targetModule) === 'function') {\n        targetModule = targetModule(f, target);\n      }\n\n      if (options.amd) {\n        amdPrefix = options.amdPrefixString;\n        amdSuffix = options.amdSuffixString;\n      }\n\n      if (!targetModule && options.singleModule) {\n        throw new Error(\"When using singleModule: true be sure to specify a (target) module\");\n      }\n\n      if (options.existingModule && !options.singleModule) {\n        throw new Error(\"When using existingModule: true be sure to set singleModule: true\");\n      }\n\n      if (options.singleModule) {\n        var moduleSuffix = options.existingModule ? \"\" : \", []\";\n        if (options.target === 'js') {\n          bundle = \"angular.module('\" + targetModule + \"'\" + moduleSuffix + \").run(['$templateCache', function ($templateCache) {\\n\" + strict;\n          modules += '\\n}]);\\n';\n        } else if (options.target === 'coffee') {\n          bundle = \"angular.module('\" + targetModule + \"'\" + moduleSuffix + \").run(['$templateCache', ($templateCache) ->\\n\";\n          modules += '\\n])\\n';\n        }\n      } else if (targetModule) {\n        //Allow a 'no targetModule if module is null' option\n        bundle = \"angular.module('\" + targetModule + \"', [\" + moduleNames.join(', ') + \"])\";\n        if (options.target === 'js') {\n          bundle += ';';\n        }\n\n        bundle += \"\\n\\n\";\n      }\n      grunt.file.write(f.dest, grunt.util.normalizelf(fileHeader + amdPrefix + bundle + modules + amdSuffix + fileFooter));\n    }\n\n    this.files.forEach(generateModule);\n\n    //Just have one output, so if we making thirty files it only does one line\n    grunt.log.writeln(\"Successfully converted \" + (\"\" + counter).green +\n      \" html templates to \" + options.target + \".\");\n  });\n};\n"}